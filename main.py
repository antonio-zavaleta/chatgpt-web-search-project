
# Chat GPT for Simple Web Queries

#     1. Use the ChatGPT API for querying.
#     2. Use the Web Search API to perform searches.
#     3. Aggregate the results into a table using pandas.

import os
from openai import OpenAI
import requests
import pandas as pd
#from dotenv import load_dotenv
import logging


# Get the API key from the .env file
APP_NAME = "chatgpt-web-queries"
#load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
openai_model = 'gpt-3.5-turbo'

ggl_search_api_key = os.getenv('GCS_CUSTOM_WEB_SEARCH_API_KEY')
ggl_search_engine_id = "32d90d9be3832424d"
ggl_custom_search_url = "https://www.googleapis.com/customsearch/v1"
verbose = False
use_chatgpt = True

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# print the API key if verbose
if verbose:
    logger.info(f'Starting {APP_NAME}')
    logger.info(f"API key: {openai_api_key}")
    logger.info(f"SEARCH API key: {ggl_search_api_key}")

# Support functions
def perform_ggl_web_search(query,
                           search_api_key,
                           search_api_cx,
                           search_api_url
                           ):
    """
    Perform a Google web search using the provided query and API credentials.

    Args:
        query (str): The search query.
        search_api_key (str): The API key for the Google Custom Search JSON API.
        search_api_cx (str): The custom search engine ID.
        search_api_url (str): The URL endpoint for the Google Custom Search JSON API.

    Returns:
        dict: The JSON response from the Google Custom Search API.
    """
    logger.info(f"Performing Google web search for query: {query}")
    params = {
        "key": search_api_key,
        "cx": search_api_cx,
        "q": query
    }

    response = requests.get(search_api_url, params=params)

    return response#.json()

def query_chatgpt(prompt):
    """
    Sends a prompt to the OpenAI ChatGPT model and returns the generated response.
    Args:
        prompt (str): The input text prompt to be sent to the ChatGPT model.
    Returns:
        str: The response generated by the ChatGPT model based on the input prompt.
    """
    
    client = OpenAI(api_key=openai_api_key)
    chat_completion = client.chat.completions.create(
        messages=[
            {"role": "user", "content": prompt},            
        ],
        model='gpt-3.5-turbo'
    )
    return chat_completion.choices[0].message.content

def parse_search_results(search_results):
    """
    Parses search results from a web search API response.
    Args:
        search_results (dict): A dictionary containing search results from a web search API.
    Returns:
        list: A list of dictionaries, each containing the title, URL, and snippet of a search result.
    """
    
    parsed_results = []
    for item in search_results.json().get("items", {}):
        parsed_results.append({
            "Title": item.get("title"),
            "DisplayLink": item.get("displayLink"),
            "URL": item.get("link"),
            "Snippet": item.get("snippet")
        })
    return parsed_results


def main():
    logger.info(f'Starting {APP_NAME}')
    # Step 1: Query ChatGPT for search terms
    prompt = "Provide 3 interesting topics to search related to the Tesla Model X. List each topic as a single sentence followed by carriage return. Limit each sentence to no more than 10 words. Do not use a number to denote each topic."
    logger.info(f"ChatGPT Prompt: {prompt}")
    
    if use_chatgpt:
        chatgpt_response = query_chatgpt(prompt)
        logger.info(f"ChatGPT Suggested Topics: {chatgpt_response}")
        topics = chatgpt_response.split("\n")
    else: # Use predefined topics
        topics = [
            '1. Tesla Model 3 autopilot features and capabilities.',
            '2. Comparisons between Tesla Model 3 and other electric cars.',
            '3. Customer reviews and experiences with the Tesla Model 3.'
                  ]
            
    # Step 2: Perform web searches
    logger.info("Performing web searches based on the suggested topics...")
    
    all_results = []

    for topic in topics[:3]:  # Limit to 3 topics
        logging.info(f"Performing web search for topic: {topic}")
        search_results = perform_ggl_web_search(
            topic,
            ggl_search_api_key,
            ggl_search_engine_id,
            ggl_custom_search_url
        )
        parsed_results = parse_search_results(search_results)
        parsed_results = [{"Topic": topic, **result} for result in parsed_results]
        all_results.extend(parsed_results)
    logger.info(f"Web searches completed.")
    
    # Step 3: Create a dataframe from the search results
    logger.info("Creating a dataframe from the search results...")
    df = pd.DataFrame(all_results)
    logger.info(f'Search results as dataframe:\n{df.head(5)}') 
    
    save_path = "/tmp/search_results.csv"
    df.to_csv(save_path, index=False)
    
    logger.info(f"End of {APP_NAME}")

if __name__ == "__main__":
    main()
# endpoint for the ChatGPT API

